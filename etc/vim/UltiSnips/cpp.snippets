# snippet for C++

snippet == "separator"
//=========================================================================

endsnippet

snippet -- "separator"
//-------------------------------------------------------------------------

endsnippet

snippet #i< "#include"
#include <$0>
endsnippet

snippet #i" "#include"
#include "$0"
endsnippet

snippet #d "#define"
#define $0
endsnippet

snippet #if "#if"
#if $0
#endif
endsnippet

#======================================================

snippet if "if"
if (${1:true}) {
    ${0:statement};
}
endsnippet

snippet ifel "if else"
if (${1:true}) {
    ${0:statement};
} else {
    statement;
}
endsnippet

snippet elif "else if"
else if (${1:true}) {
    ${0:statement};
}
endsnippet

snippet el "else"
else {
    ${0:statement};
}
endsnippet

#======================================================

snippet for "for"
for (int i = 0; i < n; ++i) {
    ${0:statement};
}
endsnippet

snippet forj "for j"
for (int j = 0; j < n; ++j) {
    ${0:statement};
}
endsnippet

snippet forji "for ji"
for (int j = 0; j < nj; ++j) {
    for (int i = 0; i < ni; ++i) {
        ${0:statement};
    }
}
endsnippet

snippet forkji "for kji"
for (int k = 0; k < nk; ++k) {
    for (int j = 0; j < nj; ++j) {
        for (int i = 0; i < ni; ++i) {
            ${0:statement};
        }
    }
}
endsnippet

snippet foryx "for yx"
for (int y = 0; y < ny; ++y) {
    for (int x = 0; x < nx; ++x) {
        ${0:statement};
    }
}
endsnippet

snippet forzyx "for zyx"
for (int z = 0; z < nz; ++z) {
    for (int y = 0; y < ny; ++y) {
        for (int x = 0; x < nx; ++x) {
            ${0:statement};
        }
    }
}
endsnippet

#======================================================

snippet wh "while"
while (${1:true}) {
    ${0:statement};
}
endsnippet

snippet sw "switch"
switch (${1:i}) {
    case '':
        break;
    default:
        break;
}
endsnippet

snippet cl "class"
class $0 {
public:
private:
};
endsnippet

snippet st "struct"
struct $0 {
};
endsnippet

snippet en "enum"
enum $0 {
};
endsnippet

snippet func "function"
void ${0:func}() {
}
endsnippet

#======================================================
# STL
#======================================================

snippet str "std::string"
std::string
endsnippet

snippet vec "std::vector<int>"
std::vector<${0:int}>
endsnippet

snippet map "std::map<std::string, int>"
std::map<${1:std::string}, ${0:int}>
endsnippet

snippet array "std::array<int, 2>"
std::array<${1:int}, ${0:2}>
endsnippet

snippet pair "std::pair<int, int>"
std::pair<${1:int}, ${0:int}>
endsnippet

snippet cout "std::cout"
std::cout << " : " << x << std::endl;
endsnippet

snippet foritr "for iterator"
for (auto itr = std::begin(vec); itr != std::end(vec); ++itr) {
    std::cout << *itr << " ";
}
std::cout << std::endl;
endsnippet

snippet forr "for range"
for (auto x : vec) {
    std::cout << x << " ";
}
std::cout << std::endl;
endsnippet

snippet sp "shared_ptr<>"
shared_ptr<${0:int}>
endsnippet

snippet up "unique_ptr<>"
unique_ptr<${0:int}>
endsnippet

