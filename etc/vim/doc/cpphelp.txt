*cpphelp.txt*      プログラミング言語 C++ 第３版     Last Change: Sep 27, 2003

The C++ Programming Language Third Edition

Bjarne Stroustrup 著
株式会社 ロングテール / 長尾高弘 訳
アジソン・ウェスレイ


6.2  演算子の概要 (p159)                      |cpp-operators|
17   標準コンテナ (p535)                      |stl-container|
18.2 標準ライブラリアルゴリズムの概要 (p586)  |stl-algorithm|

==============================================================================
6.2 演算子の概要                                               *cpp-operators*

同じボックスの演算子は、同じ優先順位を持つ。最初の方のボックスの演算子は、あと
の方のボックスの演算子よりも高い優先順位を持つ。

演算子一覧
------------------------------------------------------------------------------
スコープ解決                   class_name::member
スコープ解決                   namespace_name::member
大域〜                         ::name
大域〜                         ::qualified-name
------------------------------------------------------------------------------
メンバ選択                     object.member
メンバ選択                     pointer->member
添字                           pointer[expr]
関数呼び出し                   expr(expr_list)
値の構築                       type(expr_list)
後置インクリメント             lvalue++
後置デクリメント               lvalue--
型識別                         typeid(type)
実行時型識別                   typeid(expr)
実行時チェック付き変換         dynamic_cast<type>(expr)
コンパイル時チェック付き変換   static_cast<type>(expr)
チェックなし変換               reinterpret_cast<type>(expr)
const 変換                     const_cast<type>(expr)
------------------------------------------------------------------------------
オブジェクトサイズ             sizeof expr
型のサイズ                     sizeof(type)
前置インクリメント             ++lvalue
前置デクリメント               --lvalue
補数                           ~expr
否定                           !expr
単項マイナス                   -expr
単項プラス                     +expr
アドレス取得                   &lvalue
間接参照                       *expr
構築 (領域確保)                new type
構築 (領域確保と初期設定)      new type (expr-list)
構築 (配置)                    new (expr-list) type
構築 (配置と初期設定)          new (expr-list) type (expr-list)
解体 (領域開放)                delete pointer
配列の解体                     delete [] pointer
キャスト (型変換)              (type)expr
------------------------------------------------------------------------------
メンバ選択                     object.*pointer-to-member
メンバ選択                     object->*pointer-to-member
------------------------------------------------------------------------------
乗算                           expr * expr
除算                           expr / expr
モジュロ (剰余)                expr % expr
------------------------------------------------------------------------------
加算 (プラス)                  expr + expr
減算 (マイナス)                expr - expr
------------------------------------------------------------------------------
左シフト                       expr << expr
右シフト                       expr >> expr
------------------------------------------------------------------------------
未満                           expr <  expr
以下                           expr <= expr
より大きい                     expr >  expr
以上                           expr >= expr
------------------------------------------------------------------------------
等しい                         expr == expr
等しくない                     expr != expr
------------------------------------------------------------------------------
ビット単位の論理積             expr & expr
------------------------------------------------------------------------------
ビット単位の排他的論理和       expr ^ expr
------------------------------------------------------------------------------
ビット単位の内包的論理和       expr | expr
------------------------------------------------------------------------------
論理積                         expr && expr
------------------------------------------------------------------------------
論理和                         expr || expr
------------------------------------------------------------------------------
条件式                         expr ? expr : expr
------------------------------------------------------------------------------
単純な代入                     lvalue   = expr
乗算して代入                   lvalue  *= expr
除算して代入                   lvalue  /= expr
剰余を代入                     lvalue  %= expr
加算して代入                   lvalue  += expr
減算して代入                   lvalue  -= expr
左シフトして代入               lvalue <<= expr
右シフトして代入               lvalue >>= expr
論理積を代入                   lvalue  &= expr
論理和を代入                   lvalue  |= expr
排他的論理和を代入             lvalue  ^= expr
------------------------------------------------------------------------------
例外スロー                     throw expr
------------------------------------------------------------------------------
コンマ (連続)                  expr, expr
------------------------------------------------------------------------------

==============================================================================
18.2 標準ライブラリアルゴリズムの概要                          *stl-algorithm*

変更なしのシーケンス演算
for_each()          シーケンス内の個々の要素を操作する
find()              シーケンス内で指定された値が最初に現れる要素を探索する
find_if()           シーケンス内で指定された叙述関数を満足させる最初の要素を探索する
find_first_of()     あるシーケンスから別のシーケンスに含まれている要素を探索する
adjacent_find()     隣り合う値の対を探索する
count()             指定された値の個数を返す
count_if()          指定された叙述関数を満足させる要素の個数を返す
mismatch()          ２つのシーケンスが最初に違いを見せる位置を探索する
equal()             ２つのシーケンスの要素が対単位で等しいときに真を返す
search()            部分シーケンスが最初に現れる位置を返す
find_end()          部分シーケンスが最後に現れる位置を返す
search_n()          指定された値が n 番目に現れる位置を返す

シーケンス変更演算
transform()         シーケンスのすべての要素にある演算を適用する
copy()              先頭要素を出発点としてシーケンスをコピーする
copy_backward()     末尾の要素を出発点としてシーケンスをコピーする
swap()              ２つの要素を交換する
iter_swap()         反復子が指す２つの要素を交換する
swap_ranges()       ２つのシーケンスの要素を交換する
replace()           指定された値を持つ要素を置換する
replace_if()        叙述関数を満たす要素を置換する
replace_copy()      指定された値を持つ要素を置換したシーケンスのコピーを作る
replace_copy_if()   指定された叙述関数を満たす要素を置換したシーケンスのコピーを作る
fill()              指定された値を持つすべての要素を置換する
fill_n()            指定された値を持つ先頭から n 個の要素を置換する
generate()          ある演算の結果によってすべての要素を置換する
generate_n()        ある演算の結果によって先頭から n 個の要素を置換する
remove()            指定された値を持つ要素を削除する
remove_if()         指定された叙述関数を満たす要素を削除する
remove_copy()       指定された値を削除したシーケンスのコピーを作る
remove_copy_if()    指定された叙述関数を満たす要素を削除したシーケンスのコピーを作る
unique()            隣り合う等しい要素を削除する
unique_copy()       隣り合う等しい要素を削除したシーケンスのコピーを作る
reverse()           要素の順番を逆にする
reverse_copy()      要素の順番を逆にしたシーケンスのコピーを作る
rotate()            要素を回転させる
rotate_copy()       要素を回転させたシーケンスのコピーを作る
random_shuffle()    要素を均質に分散させる

ソート済みシーケンス
sort()              平均時間計算量の少ない方法でソートを行う
stable_sort()       等しい要素の順番を保ちながらソートを行う
partial_sort()      シーケンスの先頭部分を並べ替える
partial_sort_copy() 先頭部分を並べ替えたシーケンスのコピーを作る
nth_element()       n 番目の要素を適切な位置に移動する
lower_bound()       値が最初に現れた場所を探索する
upper_bound()       値よりも大きい最初の要素を探索する
equal_range()       指定された値を持つ部分シーケンスを探索する
binary_search()     ソート済みシーケンスから指定された値を探索する
merge()             ２つのソート済みシーケンスを結合する
inplace_merge()     ２つの連続したソート済み部分シーケンスを結合する
partition()         叙述関数を満足させる要素を先頭にまとめる
stable_partition()  相対的な順番を保ちながら叙述関数を満足させる要素を先頭にまとめる

集合アルゴリズム
includes()          シーケンスがもう１つのシーケンスの部分シーケンスであれば真を返す
set_union()         ソート済みの和集合を作る
set_intersection()  ソート済みの積集合を作る
set_difference()    第１のシーケンスには含まれているが第２のシーケンスには含まれていない要素のソート済みシーケンスを作る(差集合)
set_symmetric_difference() 片方のシーケンスには含まれているが両方のシーケンスには含まれていない要素のソート済みシーケンスを作る(対称差)

ヒープ演算
make_heap()         ヒープとして使えるシーケンスを作る
push_heap()         ヒープに要素を追加する
pop_heap()          ヒープから要素を削除する
sort_heap()         ヒープをソートする

最小、最大
min()               ２つの値のなかで小さい方を選択する
max()               ２つの値のなかで大きい方を選択する
min_element()       シーケンスのなかでもっとも小さい要素を選択する
max_element()       シーケンスのなかでもっとも大きい要素を選択する
lexicoGraphical_compare() ２つのシーケンスの冒頭部を辞書的に比較する

順列
next_permutation()  辞書的な順番で次に当たる順列を返す
prev_permutation()  辞書的な順番で前に当たる順列を返す

*stl-find*
template<class In, class T>
In find(In first, In last, const T& val);

template<class In, class Pred>
In find_if(In first, In last, Pred p);

*stl-search*
template<class For, class For2>
For search(For first, For last, For2 first2, For2 last2);

template<class For, class For2, class BinPred>
For search(For first, For last, For2 first2, For2 last2, BinPred p);

