#!/bin/bash

#======================================================
# git
#======================================================

export GIT_BRANCH
export PREVPWD

f_checkgit() {
  if [ "$PWD" != "$PREVPWD" ]; then
    GIT_BRANCH=`__git_ps1`
    PREVPWD="$PWD"
  fi
}

f_checkgit_force() {
  PREVPWD=""
  f_checkgit
}

f_git_ps1() {
  echo "$GIT_BRANCH"
}

f_set_git_prompt() {
  PROMPT_COMMAND='echo -ne "\033]0;${USERNAME}@${HOSTNAME}: ${PWD}\007";f_checkgit'

  case $MY_SHELL_NAME in
    MINGW64|gitbash)
      COMPLETION_PATH="/c/Program Files/Git/mingw64/share/git/completion"
      GIT_PROMPT_SH=$COMPLETION_PATH/git-prompt.sh
      GIT_BRANCH_FUNC='`f_git_ps1`'
      ECO_TERM=$ECO2
      ;;
    termux)
      COMPLETION_PATH="/data/data/com.termux/files/usr/etc/bash_completion.d"
      GIT_PROMPT_SH=$COMPLETION_PATH/git-prompt.sh
      GIT_BRANCH_FUNC='`__git_ps1`'
      ECO_TERM=$ECO3
      ;;
    bash)
      COMPLETION_PATH="/etc/bash_completion.d"
      GIT_PROMPT_SH=$COMPLETION_PATH/git-prompt
      GIT_BRANCH_FUNC='`__git_ps1`'
      ECO_TERM=$ECO2
      ;;
  esac

  if [ -f "$GIT_PROMPT_SH" ]; then
    #source "$COMPLETION_PATH/git-completion.bash"
    source "$GIT_PROMPT_SH"
  fi

  export PROMPT_DIRTRIM=2
  export PS1="$ECOR$ECO_TERM${MY_SHELL_NAME}$ECOD$ECO3[\w]$ECO6${GIT_BRANCH_FUNC}$ECOD\$ "
}

git-tmp() {
    git commit -a -m "[TMP] $*";
}
git-tmp-reset() {
    git reset HEAD^;
}

gb() {
  echo "[REMOTE]"
  git remote -v
  echo "[BRANCH]"
  git branch -a -vv
}

git-tag() {
  echo "[TAG]"
  git tag
  git ls-remote --tags
}

git-branch-name() {
  git rev-parse --abbrev-ref HEAD 2>/dev/null
  #git symbolic-ref --short HEAD 2>/dev/null
  #git branch --show-current 2>/dev/null
}

git-push-origin() {
  git push origin $(git-branch-name)
}

git-rebase-origin() {
  git rebase origin/$(git-branch-name)
}

git-merge-no-commit-origin() {
  git merge --no-commit origin/$(git-branch-name)
}

# less options
# -E or --QUIT-AT-EOF
# -F or --quit-if-one-screen
# -R or --RAW-CONTROL-CHARS
# -S or --chop-long-lines
# -X or --no-init
gg()   { git graph --color=always $* | less -EFRSX; }
gg-d() { git graph --color=always --date-order  $* | less -EFRSX; }
gg-s() { git graph --color=always --name-status $* | less -EFRSX; }

alias g.='f_checkgit_force'
alias gs='git status'
alias gf='git fetch'

alias gA='git add'
alias gAu='git add -u'
alias gC='git commit -m'
alias gAC='git commit -a -m "update"'

alias gR='git reset --hard'
alias gRom='git reset --hard origin/master'
alias gPom='git push origin master'

alias git-pull-no-commit='git pull --no-commit'
alias git-merge-no-commit='git merge --no-commit'

alias git-stage='git add'
alias git-unstage='git reset --'
alias git-chmod-x='git update-index --add --chmod=+x'

alias git-track='git add'
alias git-untrack-file='git rm --cached'
alias git-untrack-dir='git rm --cached -r'
alias git-ls-track='git ls-files -s'
alias git-ls-untrack='git ls-files -o --directory'

alias git-submodule-update-all='git submodule update --init --recursive'
alias git-dirdiff='git difftool --dir-diff'

alias G='gg -15'
alias GG='vim -c "Agit"'
alias GV='vim -c "GV --all"'
alias S='vim -c "MyGstatusToggle"'

